{
  "swagger": "2.0",
  "info": {
    "title": "as/external/api/inventory.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/inventory/items": {
      "get": {
        "summary": "List returns the available items.",
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListItemResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of items to return in the result-set.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset in the result-set (for pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Search on name or UUID.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "InventoryService"
        ]
      },
      "post": {
        "summary": "Create creates the given item.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateItemRequest"
            }
          }
        ],
        "tags": [
          "InventoryService"
        ]
      }
    },
    "/api/inventory/items/{item.uuid}": {
      "put": {
        "summary": "Update updates the item matching the given DevEUI.",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "item.uuid",
            "description": "Item EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateItemRequest"
            }
          }
        ],
        "tags": [
          "InventoryService"
        ]
      }
    },
    "/api/inventory/items/{uuid}": {
      "get": {
        "summary": "Get returns the item matching the given UUID.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetItemResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "Item EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "InventoryService"
        ]
      },
      "delete": {
        "summary": "Delete deletes the item matching the given UUID.",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "uuid",
            "description": "Item EUI (HEX encoded).",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "InventoryService"
        ]
      }
    }
  },
  "definitions": {
    "apiCreateItemRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/apiItem",
          "description": "Item object to create."
        }
      }
    },
    "apiGetItemResponse": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/apiItem",
          "description": "Item object."
        }
      }
    },
    "apiItem": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string",
          "description": "Item EUI (HEX encoded)."
        },
        "name": {
          "type": "string",
          "description": "Name of the item (if left blank, it will be set to the DevEUI)."
        },
        "description": {
          "type": "string",
          "description": "Description of the item."
        },
        "isOnboarded": {
          "type": "boolean",
          "format": "boolean",
          "description": "Item is onboarded to respective server."
        },
        "isGateway": {
          "type": "boolean",
          "format": "boolean",
          "description": "Item is agateway."
        },
        "isOnboardingServerExternal": {
          "type": "boolean",
          "format": "boolean",
          "description": "Item is onboarding server internal or external."
        },
        "communication": {
          "type": "string",
          "description": "Item is mode of communication like LoRaWAN, MQTT, GSM, TCP, CoAP."
        },
        "type": {
          "type": "string",
          "description": "Item type like WaterMeter, TempSensor, Energy Meter."
        },
        "variables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Variables (user defined).\nThese variables can be used together with integrations to store tokens /\nsecrets that must be configured per item. These variables are not\nexposed in the event payloads."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Tags (user defined).\nThese tags are exposed in the event payloads or to integration. Tags are\nintended for aggregation and filtering."
        },
        "profile": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Item Profile"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Created at timestamp."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp."
        }
      }
    },
    "apiListItem": {
      "type": "object",
      "properties": {
        "UUID": {
          "type": "string",
          "description": "Item EUI (HEX encoded)."
        },
        "name": {
          "type": "string",
          "description": "Name of the item."
        },
        "description": {
          "type": "string",
          "description": "Description of the item."
        }
      }
    },
    "apiListItemResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64",
          "description": "Total number of items available within the result-set."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiListItem"
          },
          "description": "Items within this result-set."
        }
      }
    },
    "apiUpdateItemRequest": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/apiItem",
          "description": "Item object to update."
        }
      }
    }
  }
}
