syntax = "proto3";

package api;

option go_package = "github.com/clodpi/platform-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
// import "common/common.proto";



// DeviceService is the service managing the devices.
service DeviceService {
    // Create creates the given device.
    rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            post: "/api/devices"
            body: "*"
        };
    }

    // Get returns the device matching the given UUID.
    rpc Get(GetDeviceRequest) returns (GetDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices/{uuid}"
        };
    }

    // List returns the available devices.
    rpc List(ListDeviceRequest) returns (ListDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices"
        };
    }

    // Delete deletes the device matching the given UUID.
    rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{uuid}"
        };
    }

    // Update updates the device matching the given DevEUI.
    rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{device.uuid}"
            body: "*"
        };
    }

}

message Device {
    // Device EUI (HEX encoded).
    string uuid = 1 [json_name = "UUID"];

    // Name of the device (if left blank, it will be set to the DevEUI).
    string name = 2;

    // Description of the device.
    string description = 3;

    // Device is onboarded to respective server.
    bool is_onboarded = 4;

	// Device is agateway.
	bool is_gateway = 5;

	// Device is onboarding server internal or external.
	bool is_onboarding_server_external = 6;

	// Device is mode of communication like LoRaWAN, MQTT, GSM, TCP, CoAP.
	string communication = 7;

	// Device type like WaterMeter, TempSensor, Energy Meter.
	string type = 8;

    // Variables (user defined).
    // These variables can be used together with integrations to store tokens /
    // secrets that must be configured per device. These variables are not
    // exposed in the event payloads.
    map<string, string> variables = 9;

    // Tags (user defined).
    // These tags are exposed in the event payloads or to integration. Tags are
    // intended for aggregation and filtering.
    map<string, string> tags = 10;

	//Device Profile
	map<string, string> profile = 11;

	// Created at timestamp.
    google.protobuf.Timestamp created_at = 12;

    // Last update timestamp.
	google.protobuf.Timestamp updated_at = 13;

}

message DeviceListItem {
    // Device EUI (HEX encoded).
    string uuid = 1 [json_name = "UUID"];

    // Name of the device.
    string name = 2;

    // Description of the device.
    string description = 3;

}



message CreateDeviceRequest {
    // Device object to create.
    Device device = 1;
}

message GetDeviceRequest {
    // Device EUI (HEX encoded).
    string uuid = 1 [json_name = "uuid"];
}

message GetDeviceResponse {
    // Device object.
    Device device = 1;

    // Created at 2
    // Updated at 3
    // First seen at 4

}

message ListDeviceRequest {
    // Max number of devices to return in the result-set.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    // Search on name or UUID.
    string search = 3;

    // Tags to filter on.
    map<string, string> tags = 4;
}

message ListDeviceResponse {
    // Total number of devices available within the result-set.
    int64 total_count = 1;

    // Devices within this result-set.
    repeated DeviceListItem result = 2;
}

message DeleteDeviceRequest {
    // Device EUI (HEX encoded).
    string uuid = 1 [json_name = "UUID"];
}

message UpdateDeviceRequest {
    // Device object to update.
    Device device = 1;
}



